<?php

/**
 * This is the model class for table "Term".
 *
 * @author Thomas Dy <thatsmydoing@gmail.com>
 * @copyright Copyright &copy; 2010-2011 Ateneo de Manila University
 * @license http://www.opensource.org/licenses/mit-license.php
 *
 * The followings are the available columns in table 'Term':
 * @property integer $id
 * @property integer $parentId
 * @property string $name
 *
 * A tag. Zero or more tags can be assigned to an ImportSession or
 * Session. These can then be searched by one or more tags.
 */
class Term extends CActiveRecord {
	const TERM_YEAR = 2;
	const TERM_COURSE = 3;
	const TERM_SECTION = 4;
	const TERM_LAB = 5;
	const TERM_OTHER = 6;

	/**
	 * Returns the static model of the specified AR class.
	 * @return Term the static model class
	 */
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	/**
	 * @return string the associated database table name
	 */
	public function tableName() {
		return 'Term';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules() {
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('parentId, name', 'required'),
			array('parentId', 'numerical', 'integerOnly'=>true),
			array('name', 'safe'),
			// The following rule is used by search().
			// Please remove those attributes that should not be searched.
			array('id, parentId, name', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations() {
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
			'importSessions' => array(self::HAS_MANY, 'ImportSession', 'ImportSessionTerm(termId, importSessionId)'),
			'sessions' => array(self::HAS_MANY, 'Session', 'SessionTerm(termId, sessionId)'),
			'parent' => array(self::BELONGS_TO, 'Term', 'parentId'),
			'terms' => array(self::HAS_MANY, 'Term', 'parentId'),
			'users' => array(self::HAS_MANY, 'User', 'UserTerm(termId, userId)'),
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels() {
		return array(
			'id' => 'ID',
			'parentId' => 'Category',
			'name' => 'Name',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
	 */
	public function search() {
		// Warning: Please modify the following code to remove attributes that
		// should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('id',$this->id);

		$criteria->compare('parentId',$this->parentId);

		$criteria->compare('name',$this->name,true);

		$criteria->compare('parentId','>1');

		$dataProvider = new CActiveDataProvider(get_class($this), array(
			'criteria'=>$criteria,
		));
		$sort = new CSort;
		$sort->attributes = array(
			'parent.name'=>array(
				'asc'=>'parent.name',
				'desc'=>'parent.name DESC',
				'label'=>'Category',
			),
			'*',
		);
		$dataProvider->sort = $sort;
		return $dataProvider;
	}

	/**
	 * Gets a term with a certain id and certain type. If the term's type
	 * does not match with the one specified, null is returned
	 * @param integer id of the term
	 * @param integer id of the term's type
	 * @return Term the term requested
	 */
	public function getTermById($termId, $termTypeId = Term::TERM_OTHER) {
		$term = Term::model()->findByPk($termId);
		if($term != null && $term->parentId == $termTypeId) {
			return $term;
		}
		return null;
	}

	/**
	 * Gets a term with a certain name and certain type. If the term does
	 * not exist, a new term is created with the specified type. If the term
	 * exists but is not of the specified type, null is returned
	 * @param integer id of the term
	 * @param integer id of the term's type
	 * @return Term the term requested
	 */
	public function getTermByName($termName, $termTypeId = Term::TERM_OTHER) {
		$term = Term::model()->find('name LIKE :name', array(':name'=>$termName));
		if($term == null) {
			$term = new Term;
			$term->name = $termName;
			$term->parentId = $termTypeId;
			$term->save();
		} else if($term->parentId != $termTypeId) {
			return null;
		}
		return $term;
	}

	/**
	 * Gets a list of terms of a certain type.
	 * @param integer id of the term's type
	 * @param integer the user requesting the terms
	 * @return array Term
	 */
	public function getTerms($parentId, $userId = 1) {
		if($userId == 1) {
			return $this->findAllByAttributes(array(
				'parentId' => $parentId,
			));
		}
		else {
			return $this->with(array(
				'users' => array(
					'condition' => 'id = :id',
					'params' => array(
						':id' => $userId,
					),
				),
			))->findAllByAttributes(array(
				'parentId' => $parentId,
			));
		}
	}

	/**
	 * Gets new terms generated by the term input form.
	 * @return array Term
	 */
	public function getNewTerms() {
		$newTerms = array();
		foreach($_POST['term'] as $id => $datum) {
			if($id == Term::TERM_YEAR || $id == Term::TERM_COURSE || $id == Term::TERM_SECTION) {
				$term = $this->getTermById($datum, $id);
				if($term != null) {
					$newTerms[] = $term;
				}
			}
			else if($id == Term::TERM_LAB) {
				if(!empty($datum)) {
					$term = $this->getTermByName($datum, Term::TERM_LAB);
					if($term != null) {
						$newTerms[] = $term;
					}
				}
			}
			else if($id == Term::TERM_OTHER) {
				$otherTerms = preg_split('/\s*,\s*/', $datum);
				$otherTerms = array_unique($otherTerms);
				foreach($otherTerms as $otherTerm) {
					$otherTerm = trim($otherTerm);
					if(!empty($otherTerm)) {
						$term = $this->getTermByName($otherTerm);
						if($term != null) {
							$newTerms[] = $term;
						}
					}
				}
			}
		}
		return $newTerms;
	}

	/**
	 * Generates the view data needed by the term input form to display
	 * previously selected items.
	 * @param array the terms previously chosen
	 * @return array view data
	 */
	public function getViewData($terms = array()) {
		$termIds = array(
			Term::TERM_YEAR,
			Term::TERM_COURSE,
			Term::TERM_SECTION,
		);
		$viewData = array();
		$viewData[Term::TERM_LAB] = '';
		$viewData[Term::TERM_OTHER] = '';
		foreach($terms as $term) {
			if($term->parentId == Term::TERM_YEAR) {
				$viewData[Term::TERM_YEAR] = $term->id;
			}
			else if($term->parentId == Term::TERM_COURSE) {
				$viewData[Term::TERM_COURSE] = $term->id;
			}
			else if($term->parentId == Term::TERM_SECTION) {
				$viewData[Term::TERM_SECTION] = $term->id;
			}
			else if($term->parentId == Term::TERM_LAB) {
				$viewData[Term::TERM_LAB] = $term->name;
			}
			else if($term->parentId == Term::TERM_OTHER) {
				$viewData[Term::TERM_OTHER] .= $term->name . ', ';
			}
		}
		$viewData[Term::TERM_OTHER] = substr($viewData[Term::TERM_OTHER], 0, strlen($viewData[Term::TERM_OTHER])-2);
		return $viewData;
	}

	public function getParentList() {
		return array(
			Term::TERM_YEAR => 'Year',
			Term::TERM_COURSE => 'Course',
			Term::TERM_SECTION => 'Section',
			Term::TERM_LAB => 'Lab',
			Term::TERM_OTHER => 'Other',
		);
	}

	/**
	 * Creates a subselect when selecting via multiple terms.
	 * @param string the table where the original select will be done
	 * @param array list of the names of the terms used for selection
	 * @return string sql returning the ids from the table specified filtered by the terms
	 */
	public static function createSubSelect($table, $termNames) {
		//$tableIdName = lcfirst($table).'Id';
		$tableIdName = strtolower(substr($table, 0, 1)) . substr($table, 1) . 'Id';
		$numTerms = count($termNames);
		$commandBuilder = Yii::app()->db->commandBuilder;
		$sql = 'SELECT '.$tableIdName.' FROM '.$table.'Term';
		$sql = $commandBuilder->applyJoin($sql, 'JOIN Term ON termId = Term.id');
		$inCondition = $commandBuilder->createInCondition('Term', 'name', $termNames);
		$sql = $commandBuilder->applyCondition($sql, $inCondition);
		$sql = $commandBuilder->applyGroup($sql, $tableIdName);
		$sql = $commandBuilder->applyHaving($sql, 'COUNT('.$tableIdName.') = '.$numTerms);
		return $sql;
	}

	/**
	 * Generates HTML for displaying terms with links
	 * @param array list of Terms
	 * @return string the html
	 */
	public static function displayTerms($terms) {
		$html = '';
		foreach($terms as $term) {
			$html .= CHtml::link($term->name, array('importSession/index', 'tags'=>$term->name)) . ' ';
		}
		return $html;
	}

	public static function compare($termA, $termB) {
		return $termA->id - $termB->id;
	}
}
